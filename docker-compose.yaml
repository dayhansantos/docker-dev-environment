version: '3.8'
services:
  postgresdb:
    image: postgres:12.5
    restart: on-failure
    hostname: postgresdb
    container_name: postgresdb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    command: ['postgres', '-c', 'wal_level=logical', '-c', 'max_wal_senders=100', '-c', 'max_replication_slots=100', '-c', 'max_locks_per_transaction=1024']
    healthcheck:
      test: ['CMD', 'psql', '-U', 'postgres', '-c', 'SELECT 1']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  liquibase:
    image: liquibase/liquibase:4.23
    hostname: liquibase
    container_name: liquibase
    depends_on:
      - postgresdb
    volumes:
      - ./liquibase/postgres/changelog:/liquibase/changelog/
    command: --defaults-file=/liquibase/changelog/liquibase.properties update
    environment:
      AUTHORNAME: ${USER}

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    container_name: zookeeper
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.4.3
    restart: on-failure
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_NUM_PARTITIONS: 1
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - broker-data:/var/lib/kafka/data

  connect:
    image: quay.io/debezium/connect:latest
    restart: on-failure
    container_name: connect
    ports:
     - 8083:8083
    depends_on:
     - broker
     - postgresdb
    environment:
      BOOTSTRAP_SERVERS: "broker:29092"
      GROUP_ID: kafka-connect
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      ENABLE_DEBEZIUM_SCRIPTING: "true"
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.3
    restart: on-failure
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  wiremock:
    image: "wiremock/wiremock:latest"
    restart: on-failure
    container_name: wiremock
    ports:
      - "8000:8080"
    volumes:
      - ./wiremock/__files:/home/wiremock/__files
      - ./wiremock/mappings:/home/wiremock/mappings
    entrypoint: ["/docker-entrypoint.sh", "--global-response-templating", "--disable-gzip", "--verbose", "--enable-browser-proxying", "--trust-all-proxy-targets", "--record-mappings", "--proxy-all", "https://api.dev.local", "--match-headers", "Accept"]
      
volumes:
  postgres-data:
  broker-data: